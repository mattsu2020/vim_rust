/* message.c compatibility prototypes */
int smsg(const char *fmt, ...);
int semsg(const char *fmt, ...);
void siemsg(const char *fmt, ...);
void emsg(const char_u *msg);
void msg_putchar(int c);
void msg_puts(const char *s);
void msg_puts_attr(char *s, int attr);
void msg_puts_title(const char *s);
void msg_outtrans(char_u *s);
void msg_clr_eos(void);
void msg_start(void);
void msg_end(void);
int message_filtered(char_u *s);
void verbose_enter(void);
void verbose_leave(void);
void give_warning(char_u *msg, int hl);
int msg(char_u *s);
char *msg_trunc_attr(char *s, int use_history, int attr);
void set_keep_msg(char_u *p, int attr);
void trunc_string(const char *src, char *dst, int maxlen, int dstlen);
void verbose_enter_scroll(void);
void verbose_leave_scroll(void);
void msg_warn_missing_clipboard(void);
int msg_outtrans_attr(char_u *s, int attr);
char *msg_outtrans_long_attr(char *s, int attr);
void msg_advance(int col);
void msg_starthere(void);
void internal_error(const char *where);
int msg_outtrans_len_attr(char_u *s, int len, int attr);
void msg_attr(char_u *s, int attr);
void msg_outnum(long n);
void emsg_invreg(int c);
void internal_error_no_abort(const char *where);
void msg_sb_eol(void);
void msg_putchar_attr(int c, int attr);
void iemsg(const char *s);
void wait_return(int redraw);
int vim_dialog_yesno(int type, char_u *title, char_u *message, int buttons);
void msg_prt_line(char_u *s, int list);
void ch_logfile(char_u *fname, char_u *mode);
void may_clear_sb_text(void);
int do_dialog(int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd);
void verb_msg(char *s);
char_u *str2special_save(char_u *src, int do_special, int keep_screen_char);
void msg_source(int attr);
void windgoto(int row, int col);
/* Optional Rust helpers if available */
char *rs_pop_message(int *level);
void rs_queue_message(char *msg, int level);
void rs_ui_write(char *msg, int len);
char *rs_get_last_error(void);
void rs_clear_messages(void);
void rs_free_cstring(char *s);
/* vim: set ft=c : */
